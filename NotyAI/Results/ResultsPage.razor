@page "/Results"
@using NotyAI.Notes
@inject Note Note
@inject CurrentPhoto CurrentPhoto
@inject IPhotoService PhotoService
@inject NavigationManager NavigationManager

<MudStack Spacing="3">
    <MudButton StartIcon="@Icons.Material.Filled.PhotoCamera" Color="Color.Primary" OnClick="CaptureNextPhoto">
        Dodaj kolejne zdjęcie
    </MudButton>
    <MudStack Row="true" Class="w-100" Spacing="0">
        <MudStack @onclick="GoToPhoto" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="w-100" Spacing="1">
            <MudIcon Icon="@Icons.Material.Filled.Photo" Color="GetPhotoTabColor"/>
            <MudText Typo="Typo.caption" Color="GetPhotoTabColor">Zdjęcia</MudText>
        </MudStack>
        <MudStack @onclick="GoToText" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="w-100" Spacing="1">
            <MudIcon Icon="@Icons.Material.Filled.TextSnippet" Color="GetTextTabColor"/>
            <MudText Typo="Typo.caption" Color="GetTextTabColor">Tekst</MudText>
        </MudStack>
        <MudStack @onclick="GoToSummary" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="w-100" Spacing="1">
            <MudIcon Icon="@Icons.Material.Filled.EditNote" Color="GetSummaryTabColor"/>
            <MudText Typo="Typo.caption" Color="GetSummaryTabColor">Podsumowanie</MudText>
        </MudStack>
    </MudStack>

    @switch (_activeSection)
    {
        case ResultSection.Photo:
            <MudStack Spacing="1">
                @foreach (string photo in Note.Photos)
                {
                    <MudImage Src="@photo" Fluid="true"/>
                    <MudDivider/>
                }
            </MudStack>
            break;
        case ResultSection.Text:
            <MudStack Spacing="1">
                @foreach (string text in Note.Texts)
                {
                    <MudText Class="break-word">@text</MudText>
                    <MudDivider/>
                }
            </MudStack>
            break;
        case ResultSection.Summary:
            <MudText Class="break-word">@Note.Summary</MudText>
            break;
    }

    @if (_activeSection != ResultSection.Photo)
    {
        <MudText>@Note.TextSpeechPath</MudText>
        <MudText>@Note.SummarySpeechPath</MudText>
    }
</MudStack>

@code {
    private ResultSection _activeSection = ResultSection.Photo;
    public Color GetPhotoTabColor => _activeSection == ResultSection.Photo ? Color.Primary : Color.Default;
    public Color GetTextTabColor => _activeSection == ResultSection.Text ? Color.Primary : Color.Default;
    public Color GetSummaryTabColor => _activeSection == ResultSection.Summary ? Color.Primary : Color.Default;

    private void GoToPhoto()
    {
        _activeSection = ResultSection.Photo;
    }

    private void GoToText()
    {
        _activeSection = ResultSection.Text;
    }

    private void GoToSummary()
    {
        _activeSection = ResultSection.Summary;
    }

    private async Task CaptureNextPhoto()
    {
        string base64 = await PhotoService.CaptureAsync();
        if (string.IsNullOrWhiteSpace(base64))
        {
            return;
        }
        
        CurrentPhoto.Captured(base64);
        NavigationManager.NavigateTo("/ProcessPhoto");
    }

}